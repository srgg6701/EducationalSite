<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Модуль 4 Динамика веб-страниц. DHTML</title>
<<<<<<< HEAD
<link href="../style.css" rel="stylesheet" type="text/css" />
=======
<link href="../../static/styles/style.css" rel="stylesheet" type="text/css" />
>>>>>>> da1b7644161fffee36ddd2f82163a3f3ede8d780
</head>
<body>
<h1 class="head_1">Модуль 4 Динамика веб-страниц. DHTML</h1>
<h2 class="head_2">Глава 1 Скрипты</h2>
<div class="maintext">DHTML - это коммерческий термин, придуманный для описания технологий, которые были введены в 4-й версии веб-браузеров и позволили обходить ограничения HTML [1].</div>
<<<<<<< HEAD
<div class="maintext">Как известно, HTML документ в текстовом виде представляет собой набор открывающих и закрывающих тэгов; браузер интерпретирует их и представляет документ в графическом виде. Среди этих тэгов, в документе могут встречаться конструкции, заключенные в тэги <span> <img src="../images/05-01-2015 23-17-59.png" width="157" height="26" /> </span> Любой тег (элемент) в HTML-документе представляет собой объект, свойства и методы отображения которого можно изменять при помощи JScript. Для того, чтобы веб-страницы не выглядели уныло, придумали DHTML, материальной основой которого являются CSS - каскадные таблицы стилей, и скрипты-интерпретаторы (javascript, perlscript, VBscript).</div>
=======
<div class="maintext">Как известно, HTML документ в текстовом виде представляет собой набор открывающих и закрывающих тэгов; браузер интерпретирует их и представляет документ в графическом виде. Среди этих тэгов, в документе могут встречаться конструкции, заключенные в тэги <span> <img src="../../static/images/05-01-2015 23-17-59.png" width="157" height="26" /> </span> Любой тег (элемент) в HTML-документе представляет собой объект, свойства и методы отображения которого можно изменять при помощи JScript. Для того, чтобы веб-страницы не выглядели уныло, придумали DHTML, материальной основой которого являются CSS - каскадные таблицы стилей, и скрипты-интерпретаторы (javascript, perlscript, VBscript).</div>
>>>>>>> da1b7644161fffee36ddd2f82163a3f3ede8d780
<div class="maintext">Подробно на CSS останавливаться не будем, необходимо только отметить, что CSS позволяют оформлять страницы так, как мы сами этого захотим. Таблицу стилей можно представлять как в самом HTML-документе, так и во внешнем файле, что является более рациональным.</div>
<div class="maintext"> В настоящее время почти все веб-страницы используют JavaScript. Это скриптовый язык программирования, который работает на веб-браузере посетителя. Это делает веб-страницы более функциональными [6]. 
Скрипты нужны для оживления и некоторой интеллектуальности документа ¬– чтобы в нем все двигалось и бегало в идеальном случае или просто для удобного интерфейса как минимум. В целях обеспечения такой возможности служит такое средство, как язык javascript.
Однако не следует злоупотреблять скриптами, поскольку: во-первых интерпретаторы браузеров разных производителей их понимают по-разному, либо могут часть из них неправильно обработать, во-вторых чрезмерное использование движущихся скриптов в документе обычно вызывает раздражение у посетителей страницы.
Если JavaScript отключен по некоторым причинам, содержание или функциональность веб-страницы может быть ограничена или вовсе не возможна [6].
</div>
<div class="maintext">Язык JavaScript - клиентский язык, т.е. событийно-управляемый. Без него страницы были бы не в состоянии отвечать на действия посетителя или предлагать что-либо интерактивное, динамичное и впечатляющее. Подготовка Web-страницы к ответу на события проходит в два этапа:
- Первым делом идентифицируем элемент страницы, реагирующий на событие;
- присваиваем событие обработчику [5].
</div>
<div class="maintext">Из скрипта можно обратиться к свойствам и методам практически любого объекта и соответственно их изменять. Изменять можно все что угодно: цвет, шрифт, размер, источник, границы, положение.</div>
<<<<<<< HEAD
<img src="../images/06-01-2015 17-27-56.png" width="615" height="195" />
<div class="maintext">Итак, как же написать скрипт?</div>
<div class="maintext">1) Вариант первый в тэге script необходимо задать функции и переменные: </div>
<img src="../images/06-01-2015 17-31-07.png" width="271" height="360" />
<div class="maintext">Затем в тэгах почти любого элемента мы можем присвоить обработчику эту новую функцию:</div>
<img src="../images/06-01-2015 17-33-39.png" width="434" height="112" />
<div class="maintext">То есть, окошко с приветствием будет появляться при загрузке документа, при нажатии на кнопку, при проведении курсором над гиперссылкой.</div>
<div class="maintext">2) Второй случай – можно прямо задать обработчик в тэгах, не описывая ту или иную функцию. При этом соответствующий обработчик указывается как атрибут элемента HTML-документа; значением этого атрибута является выражение JavaScript:</div>
<img src="../images/06-01-2015 17-35-53.png" width="507" height="73" />
<div class="maintext">В данном примере с помощью this обрабатывается сам объект, вызвавший событие.</div>
<div class="maintext">3) Можно каждому объекту присвоить ID (или множеству объектов - одинаковый ID) и писать так:
</div>
<img src="../images/06-01-2015 17-37-58.png" width="398" height="467" />
<div class="maintext">В данном примере всем объектам документа с одинаковым ID назначен одинаковый обработчик события - при проведении над ними мышью их цвет меняется на желтый, когда мышь с объекта убираем цвет становится черным.</div>
<div class="maintext">4) Можно весь текст скрипта вынести в отдельный файл с расширением .js и создать нечто вроде универсальной библиотеки, в которую можно вынести функции, ведающие динамическим созданием объектов в период выполнения, и т.п. Такие функции и библиотеки должны претендовать на универсальность, поэтому их создают довольно редко, зато их использование окупается экономией времени, и размеров создаваемых файлов. В дальнейшем, в том месте документа, где должна выполниться библиотека, вставляют:</div>
<img src="../images/06-01-2015 17-40-48.png" width="214" height="75" />
=======
<img src="../../static/images/06-01-2015 17-27-56.png" width="615" height="195" />
<div class="maintext">Итак, как же написать скрипт?</div>
<div class="maintext">1) Вариант первый в тэге script необходимо задать функции и переменные: </div>
<img src="../../static/images/06-01-2015 17-31-07.png" width="271" height="360" />
<div class="maintext">Затем в тэгах почти любого элемента мы можем присвоить обработчику эту новую функцию:</div>
<img src="../../static/images/06-01-2015 17-33-39.png" width="434" height="112" />
<div class="maintext">То есть, окошко с приветствием будет появляться при загрузке документа, при нажатии на кнопку, при проведении курсором над гиперссылкой.</div>
<div class="maintext">2) Второй случай – можно прямо задать обработчик в тэгах, не описывая ту или иную функцию. При этом соответствующий обработчик указывается как атрибут элемента HTML-документа; значением этого атрибута является выражение JavaScript:</div>
<img src="../../static/images/06-01-2015 17-35-53.png" width="507" height="73" />
<div class="maintext">В данном примере с помощью this обрабатывается сам объект, вызвавший событие.</div>
<div class="maintext">3) Можно каждому объекту присвоить ID (или множеству объектов - одинаковый ID) и писать так:
</div>
<img src="../../static/images/06-01-2015 17-37-58.png" width="398" height="467" />
<div class="maintext">В данном примере всем объектам документа с одинаковым ID назначен одинаковый обработчик события - при проведении над ними мышью их цвет меняется на желтый, когда мышь с объекта убираем цвет становится черным.</div>
<div class="maintext">4) Можно весь текст скрипта вынести в отдельный файл с расширением .js и создать нечто вроде универсальной библиотеки, в которую можно вынести функции, ведающие динамическим созданием объектов в период выполнения, и т.п. Такие функции и библиотеки должны претендовать на универсальность, поэтому их создают довольно редко, зато их использование окупается экономией времени, и размеров создаваемых файлов. В дальнейшем, в том месте документа, где должна выполниться библиотека, вставляют:</div>
<img src="../../static/images/06-01-2015 17-40-48.png" width="214" height="75" />
>>>>>>> da1b7644161fffee36ddd2f82163a3f3ede8d780
<div class="maintext">Это так называемые инлайн-скрипты.</div>
<div class="maintext">Если мы написали скрипт для объекта, который не существует, или для свойства, которое не существует, будет выдано сообщение об ошибке. В последних версиях JS появился механизм обработки подобных ситуаций.</div>
<div class="maintext">Для создания динамических страниц большая часть обращений из скрипта будет направлена к свойству style объекта. Вот где соприкасаются JS и CSS.</div>
<h2 class="head_2">Глава 2 Обработчики событий</h2>
<div class="maintext">В JavaScript, как и других объектно ориентированных языках, определен ряд событий, связанных с элементами документа. Обработчики событий - это операторы или функции, которые выполняются в случае наступления определенного события (нажатия на кнопку, изменения содержимого текстового поля, щелчка мышью на гиперссылке и т.д.). Событие - это сигнал от браузера о том, что что-то произошло. Практически все JavaScript-приложения выполняют те или иные действия, откликаясь на различные события. Обработчик во многом аналогичен функции, но вызывается он не JavaScript-программой, а самим браузером [3,4]. 
</div>
<div class="maintext">Обработчики дают возможность организовать реакцию на возникновение событий из сценария.</div>
<div class="maintext">Обработчики событий принадлежат JavaScript, но они скорее «встроены» в HTML-код, а не существуют самостоятельно. Они входят в структуру документа НТМL, не требуя использования тега <SCRIPT> </SCRIPT>. По сути же обработчики не являются скриптами, а представляют область взаимодействия между HTML-страницей и пользователем и поэтому для их использования необязательно писать отдельные программы, а достаточно лишь связать их с определенными тегами. В таблице 1 приведены и описаны основные обработчики событий.</div>
<table width="75%" border="2" cellspacing="1" cellpadding="4">
  <caption>
    Обработчики событий
  </caption>
  <tr>
    <th scope="col">Обработчик</th>
    <th scope="col">Соответствующее обработчику событие</th>
    <th scope="col">На что влияет обработчик</th>
  </tr>
  <tr>
    <td>onBlur</td>
    <td>когда поля формы select, text или textarea теряют фокус
    </td>
    <td>Документы и формы</td>
  </tr>
  <tr>
    <td>onChange</td>
    <td>поля формы select, text или textarea теряют фокус и их значения изменяются</td>
    <td>Документы и формы</td>
  </tr>
  <tr>
    <td>onClick</td>
    <td>при щелчке мышью на объекте формы</td>
    <td>все</td>
  </tr>
  <tr>
    <td>onFocus</td>
    <td>поле получает фокус ввода с клавиатуры или щелчком мыши. Выбор результатов внутри поля связано с событием select, но не с событием focus.</td>
    <td>Документы, формы, элементы select, text, textarea</td>
  </tr>
  <tr>
    <td>onLoad</td>
    <td>Браузер завершает загрузку окна или всех фреймов внутри тэга FRAMESET</td>
    <td>Документы и изображения</td>
  </tr>
  <tr>
    <td>onUnload</td>
    <td>При выходе из документа</td>
    <td>Документы и изображения</td>
  </tr>
  <tr>
    <td>onMouseOver</td>
    <td>курсор мыши попадает на объект</td>
    <td>Ссылки и картинки</td>
  </tr>
  <tr>
    <td>onMouseMove</td>
    <td>При движении мыши</td>
    <td>Применительно к документу</td>
  </tr>
  <tr>
    <td>onMouseOut</td>
    <td>Указатель мыши выходит из области</td>
    <td>Все элементы</td>
  </tr>
  <tr>
    <td>onMouseDown</td>
    <td>Кнопка мыши нажата</td>
    <td>все</td>
  </tr>
  <tr>
    <td>onMouseUp</td>
    <td>Кнопка мыши отпускается</td>
    <td>Все элементы</td>
  </tr>
  <tr>
    <td>onSelect</td>
    <td>Выбран некоторый текст внутри поля text или textarea</td>
    <td>Формы, text, textarea</td>
  </tr>
  <tr>
    <td>onSubmit</td>
    <td>При отправке формы на Web-сервер</td>
    <td>формы</td>
  </tr>
</table>
<div class="maintext">Обработчик событий onChange используется для подтверждения данных после их изменения пользователем.</div>
<div class="maintext">Обработчик событий onLoad используется внутри тeгов BODY или FRAMESET в качестве атрибута.</div>
<div class="maintext">В отношении FRAMESET и FRAME событие onLoad, размещенное внутри фрейма в таге BODY, выполняется перед событием onLoad, размещенном внутри FRAMESET в таге FRAMESET. </div>
<div class="maintext">Обработчик событий onMouseOver: Событие mouseOver происходит каждый раз, когда курсор мыши попадает на объект. Обработчик событий onMouseOver выполняет программу JavaScript, когда происходит событие mouseOver.
Вы должны возвращать true внутри обработчика событий, если вы хотите использовать свойства status или defaultStatus с обработчиком событий onMouseOver.
</div>
<div class="maintext">Вы можете использовать обработчик событий onSubmit для остановки передачи данных формы; для этого используется выражение return, которое возвращает false в обработчик событий. Любое другое возвращенное значение отправляет форму.</div>
<div class="maintext">В отношении FRAMESET и FRAME событие onUnload, размещенное внутри фрейма в таге BODY, происходит перед событием onUnload, размещенного внутри FRAMESET в теге FRAMESET. 
</div>
</body>
</html>
